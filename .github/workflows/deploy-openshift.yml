name: deploy-openshift

on:
  workflow_dispatch:
    inputs:
      aws_access_key_id:
        description: 'AWS Access Key ID'
        required: true
      aws_secret_access_key:
        description: 'AWS Secret Access Key'
        required: true
      region:
        description: 'AWS Region to deploy cluster to'
        required: true
        default: 'us-east-1'        
      s3_storage:
        description: 'S3 storage bucket name to save installation config files'
        required: true
        default: 'ocp-s3-storage'
      baseDomain:
        description: 'Base domain to deploy the cluster'
        required: true       
      clusterNamePrefix:
        description: 'Cluster name prefix will get combined with the github run number'
        required: true
        default: 'ocp'
      numWorkers:
        description: 'Number of workers to deploy on the cluster'
        required: true
        default: '3'
      workersFlavor:
        description: 'Workers default size'
        required: true
        default: 'm5.xlarge'    
      networkType:
        description: 'Network type to deploy for cluster (OpenShiftSDN, OVNKubernetes)'
        required: true
        default: 'OpenShiftSDN'
      cidrMachineNetwork:
        description: 'CIDR of Machines Network (ie. 10.0.0.0/16)'
        required: true
        default: '10.0.0.0/16'

jobs:
  deploy-ocp:
    runs-on: macos-latest
    env:
      lcl_install_dir: ${{ github.event.inputs.clusterNamePrefix }}-${{ github.run_number }}
      kubeconfig_path: "${{github.workspace}}/${{ github.event.inputs.clusterNamePrefix }}-${{ github.run_number }}/auth/kubeconfig"
      numMasters: 3
      hostPrefix: '23'
      cidrClusterNetwork: '10.128.0.0/14'
      serviceNetwork: '172.30.0.0/16'

    steps:
      - name: "Checkout ${{ github.ref }}"
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: Install OpenShift CLI
        uses: redhat-actions/oc-installer@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "::add-mask::${{ github.event.inputs.aws_access_key_id }}"
          aws-secret-access-key: "::add-mask::${{ github.event.inputs.aws_secret_access_key }}"
          aws-region: ${{ github.event.inputs.region }}

      - name: Create SSH key for cluster
        shell: bash
        run: |
          echo "\n *** VARS USED IN THIS STEP *** "
          echo "lcl_install_dir is: ${{ env.lcl_install_dir }}"
          echo " ********************************* \n"
          mkdir -p ./${{ env.lcl_install_dir }}/ssh-keys/
          ssh-keygen -t rsa -b 4096 -q -N "" -f "./${{ env.lcl_install_dir }}/ssh-keys/${{ env.lcl_install_dir }}"
          aws s3 sync ./${{ env.lcl_install_dir }}/ssh-keys/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/ssh-keys/

      - name: Parameterize install-config.yaml
        shell: bash
        env:
          s3_config_path: "${{ github.event.inputs.s3_storage }}/ocp-install-configs"
          clusterName: "${{ github.event.inputs.clusterNamePrefix }}-${{ github.run_number }}"
        run: |
          aws s3 cp s3://${{ env.s3_config_path }}/pull-secret.txt ./${{ env.lcl_install_dir }}/pull-secret.txt --region us-east-1 --quiet
          export pullSecret=$(cat "./${{ env.lcl_install_dir }}/pull-secret.txt")
          export sshKey=$(cat "./${{ env.lcl_install_dir }}/ssh-keys/${{ env.lcl_install_dir }}.pub")
          export region=${{ github.event.inputs.region }}
          export email=${{ secrets.EMAIL }}
          export delete_by=NEVER
          export always_up=false
          export baseDomain=${{ github.event.inputs.baseDomain }}
          export numMasters=${{ env.numMasters }}
          export numWorkers=${{ github.event.inputs.numWorkers }}
          export workersFlavor=${{ github.event.inputs.workersFlavor }}
          export hostPrefix=${{ env.hostPrefix }}
          export networkType=${{ github.event.inputs.networkType }}
          export clusterName=${{ env.clusterName }}
          export cidrClusterNetwork=${{ env.cidrClusterNetwork }}
          export cidrMachineNetwork=${{ github.event.inputs.cidrMachineNetwork }}
          export serviceNetwork=${{ env.serviceNetwork }}
          envsubst < ./install-configs/install-config-template.yaml > ./${{ env.lcl_install_dir }}/install-config.yaml
          aws s3 sync ./${{ env.lcl_install_dir }}/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/

      - name: Download OpenShift installer and update permissions
        shell: bash
        env:
          s3_installer_path: "${{ github.event.inputs.s3_storage }}/macos-installer"
        run: |
          mkdir -p ./${{ env.lcl_install_dir }}
          echo "Downloading OpenShift Installer..."
          aws s3 cp s3://${{ env.s3_installer_path }}/openshift-install ./openshift-install --region us-east-1 --quiet
          echo "Update permissions to executable on the openshift-installer..."
          chmod +rwx ./openshift-install
          echo "OCP_VERSION=$(./openshift-install version | head -n 1)" >> $GITHUB_ENV

      - name: Create manifests
        shell: bash
        run: |
          echo "Create OpenShift manifests...\n"
          ./openshift-install --dir=./${{ env.lcl_install_dir }} create manifests

      - name: Parameterize cluster-network-03-config file
        if: github.event.inputs.networkType == 'OVNKubernetes'
        shell: bash
        env:
          s3_config_path: "${{ github.event.inputs.s3_storage }}/ocp-install-configs"
        run: |
          export hostPrefix=${{ env.hostPrefix }}
          export cidrClusterNetwork=${{ env.cidrClusterNetwork }}
          export serviceNetwork=${{ env.serviceNetwork }}
          export cidrhybridClusterNetwork=${{ secrets.cidrhybridClusterNetwork }}
          envsubst < ./install-configs/cluster-network-03-config-template.yaml > ./${{ env.lcl_install_dir }}/manifests/cluster-network-03-config.yaml
          aws s3 sync ./${{ env.lcl_install_dir }}/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/
          if [ ! -f ./${{ env.lcl_install_dir }}/manifests/cluster-network-03-config.yml ]; then echo "cluster-network-03-config.yaml does not exist." exit 1; else echo "cluster-network-03-config.yaml exists, continuing deployment..."; fi

      - name: Create ignition configs
        shell: bash
        run: |
          ./openshift-install create ignition-configs --dir=./${{ env.lcl_install_dir }}

      - name: Run OCP installer - create cluster
        shell: bash
        run: | 
          echo "Starting Install of $OCP_VERSION"
          echo "Deployment ETA ~40 minutes..."
           ./openshift-install --dir=./${{ env.lcl_install_dir }} create cluster --log-level=debug
          echo "Uploading install files to S3 for: ${{ env.lcl_install_dir }}"
          aws s3 sync ./${{ env.lcl_install_dir }} s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}

      - name: Create SSH key for WMCO
        shell: bash
        run: |
          mkdir -p ./${{ env.lcl_install_dir }}/ssh-keys/
          ssh-keygen -t rsa -b 4096 -m PEM -q -N "" -f "./${{ env.lcl_install_dir }}/ssh-keys/${{ env.lcl_install_dir }}-wmco"
          aws s3 sync ./${{ env.lcl_install_dir }}/ssh-keys/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/ssh-keys/

      - name: Install WMCO
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          oc create -f ./crd/wmco-namespace.yaml
          oc create -f ./crd/wmco-og.yaml
          oc create -f ./crd/wmco-sub.yaml
          echo "verifying the WMCO installation:"
          oc get csv -n openshift-windows-machine-config-operator

      - name: Associate SSH key to WMCO
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          oc create secret generic cloud-private-key --from-file=private-key.pem=./${{ env.lcl_install_dir }}/ssh-keys/${{ env.lcl_install_dir }}-wmco -n openshift-windows-machine-config-operator

      - name: Deploy MachineSet for Windows
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          export infrastructure_id=$(oc get -o jsonpath='{.status.infrastructureName}{"\n"}' infrastructure cluster)
          export zone=${{ github.event.inputs.region }}a
          export email=${{ secrets.EMAIL }}
          export windows_base_ami=${{ github.event.inputs.ami }}
          export region=${{ github.event.inputs.region }}
          export delete_by=NEVER
          export always_up=false
          envsubst < ./crd/aws-machineset-win-template.yaml >> ./${{ env.lcl_install_dir }}/aws-machineset-win.yaml
          oc create -f ./${{ env.lcl_install_dir }}/aws-machineset-win.yaml
          aws s3 sync ./${{ env.lcl_install_dir }}/ s3://${{ github.event.inputs.s3_storage }}/${{ env.lcl_install_dir }}/
          echo "Waiting for Windows MachineSet to become Available..."
          until oc get machineset ${infrastructure_id}-windows-worker-${zone} -n openshift-machine-api -o json | jq -e '(.status.availableReplicas == 1)' | grep -m 1 'true'; do sleep 2; done

      - name: Remove kubeadmin user
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          echo "KUBECONFIG env var is: $KUBECONFIG"
          echo "Verify by running oc get nodes:"
          oc get nodes
          htpasswd -c -B -b ./users.htpasswd ${{ secrets.OC_USER }} ${{ secrets.OC_PASSWORD }}
          oc create secret generic htpass-secret --from-file=htpasswd=./users.htpasswd -n openshift-config
          oc apply -f ./crd/htpasswd-oauth.yml
          oc create clusterrolebinding registry-controller --clusterrole=cluster-admin --user=${{ secrets.OC_USER }}
          oc adm policy add-cluster-role-to-user cluster-admin ${{ secrets.OC_USER }}
          oc delete secrets kubeadmin -n kube-system

      - name:  install certbot + aws-route53-extension
        shell: bash
        run: |
          brew install certbot
          pip3 install certbot-dns-route53

      - name: Run certbot against route53 to generate certs
        shell: bash
        env:
          domain_for_cert: "*.apps.${{ github.event.inputs.clusterNamePrefix }}-${{ github.run_number }}.${{ secrets.baseDomain }}"
        run: |
          certbot certonly \
            --dns-route53 \
            --config-dir ./certbot-config \
            --logs-dir ./certbot/logs \
            --work-dir ./certbot/work \
            --agree-tos \
            --non-interactive \
            --email ${{ secrets.EMAIL }} \
            -d "${{ env.domain_for_cert }}"

      - name: Apply ssl cert against OpenShift
        shell: bash
        env:
          cert_name: "apps.${{ github.event.inputs.clusterNamePrefix }}-${{ github.run_number }}.${{ secrets.baseDomain }}"
          fullchain_path: "${{github.workspace}}/certbot-config/live/${{ env.cert_name }}/fullchain.pem"
          privkey_path: "${{github.workspace}}/certbot-config/live/${{ env.cert_name }}/privkey.pem"
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          oc login -u ${{ secrets.OC_USER }} -p ${{ secrets.OC_PASSWORD }}
          fullchain="${{github.workspace}}/certbot-config/live/${{ env.cert_name }}/fullchain.pem"
          privkey="${{github.workspace}}/certbot-config/live/${{ env.cert_name }}/privkey.pem"
          oc create secret tls router-certs --cert=$fullchain --key=$privkey -n openshift-ingress
          oc patch ingresscontroller default -n openshift-ingress-operator --type=merge --patch='{"spec": { "defaultCertificate": { "name": "router-certs" }}}'

      - name: Pre-pull Windows container image job
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          export windowsIP=$(oc get node -l kubernetes.io/os=windows,node-role.kubernetes.io/worker -o json | jq -r '.items[0].status.addresses[0].address')
          export containerImage=${{ github.event.inputs.containerImage }}
          export sshkeySecretName='cloud-private-key'
          export id=${{ github.run_number }}
          envsubst < ./crd/prepull-image-template.yaml >> ./${{ env.lcl_install_dir }}/prepull-image.yaml
          oc project openshift-windows-machine-config-operator
          oc create -f ./${{ env.lcl_install_dir }}/prepull-image.yaml
          echo "Waiting for Windows image pull to complete..."
          oc wait --for=condition=complete --timeout=900s job/pre-pull-windows-image-${{ github.run_number }}

      - name: Deploy Windows container
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          export containerName='windows-demo-iis'
          export projectName='windows-workloads'
          export containerImage=${{ github.event.inputs.containerImage }}
          export id=${{ github.run_number }}
          envsubst < ./crd/windows-container-template.yaml >> ./${{ env.lcl_install_dir }}/windows-container.yaml
          oc new-project $projectName
          oc create -f ./${{ env.lcl_install_dir }}/windows-container.yaml
          export oc_container=$(oc get pods -n windows-workloads -o json | jq -r '.items[0].status.containerStatuses[0].name')
          echo "Waiting for $oc_container to start..."
          until oc get pods -n $projectName -o json | jq -e '(.items[0].status.containerStatuses[0].started == true)' | grep -m 1 'true'; do sleep 2; done

      - name: Expose Route & verify 200 code
        shell: bash
        run: |
          export KUBECONFIG=$(pwd)/${{ env.lcl_install_dir }}/auth/kubeconfig
          export oc_container=$(oc get pods -n windows-workloads -o json | jq -r '.items[0].status.containerStatuses[0].name')
          oc expose deployment $oc_container --target-port=80 --port=8080
          oc expose svc $oc_container
          export url=$(oc get route $oc_container -o jsonpath='{.spec.host}{"\n"}')
          if [ "curl -I $url 2>/dev/null | head -n 1 | cut -d$' ' -f2 == 200" ]; then echo "200 was Returned! All Good"; fi

